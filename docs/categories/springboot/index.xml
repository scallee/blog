<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>springboot on 轨迹的印痕</title>
    <link>https://scallee.github.io/blog//categories/springboot/</link>
    <description>Recent content in springboot on 轨迹的印痕</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 16 Jun 2019 21:44:38 +0800</lastBuildDate>
    
	<atom:link href="https://scallee.github.io/blog//categories/springboot/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SpringBoot使用读写分离数据源</title>
      <link>https://scallee.github.io/blog//post/springboot%E4%BD%BF%E7%94%A8%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E6%95%B0%E6%8D%AE%E6%BA%90/</link>
      <pubDate>Sun, 16 Jun 2019 21:44:38 +0800</pubDate>
      
      <guid>https://scallee.github.io/blog//post/springboot%E4%BD%BF%E7%94%A8%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E6%95%B0%E6%8D%AE%E6%BA%90/</guid>
      <description>&lt;h2 id=&#34;springboot使用读写分离数据源&#34;&gt;SpringBoot使用读写分离数据源&lt;/h2&gt;

&lt;p&gt;本文来源：&lt;a href=&#34;https://springboot.io/t/topic/49&#34;&gt;https://springboot.io/t/topic/49&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;网站应用的瓶颈大多在DB，DB的性能直接的决定了网站的负载能力。一般的b/s应用。读请求数量大于写请求，于是可以通过读写分离来把读请求负载到多个数据源中（一主N从）。在并发过大的时候，读写分离就能为应用带来一定的性能提升。
读写分离不是特别复杂的技术，可以通过中间件或者自己编码实现。可幸&lt;code&gt;Spring&lt;/code&gt;框架已经提供了动态数据源的这种机制&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>springboot入门</title>
      <link>https://scallee.github.io/blog//post/spring-boot%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sun, 12 May 2019 20:42:41 +0800</pubDate>
      
      <guid>https://scallee.github.io/blog//post/spring-boot%E5%85%A5%E9%97%A8/</guid>
      <description>一、Spring Boot 入门 1、Spring Boot 简介 简化Spring应用开发的一个框架； 整个Spring技术栈的一个大整合； J2EE开发的一站式解决</description>
    </item>
    
  </channel>
</rss>