#+HUGO_BASE_DIR: ../
#+SEQ_TODO: TODO DRAFT DONE
#+PROPERTY: header-args :eval no
#+OPTIONS: author:nil

* INBOX

** DONE JavaScript —— this 绑定                           :JavaScript:@计算机:
   CLOSED: [2017-11-14 Tue 14:39]
   :PROPERTIES:
   :EXPORT_FILE_NAME: javascript-this
   :END:

Google 搜索出来的两个不错的链接：

- [[https://jeffjade.com/2015/08/03/2015-08-03-javascript-this/][JavaScript 之 this 详解 | 晚晴幽草轩]]
- [[https://segmentfault.com/a/1190000003046071][JS 中 this 关键字详解 - JSer - SegmentFault]]


我是先阅读的 [[https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes][You-Dont-Know-JS: this & Object Prototypes]] 。再回过头看上面的那两篇文章，我觉得他们讲解的太复杂了，而 《You-Dont-Know-JS》 就归纳的非常好。

<!--more-->

以下是总结笔记：

JS 中的 =this= 总是指向一个对象 (Object)，这个对象是基于函数运行时 *动态绑定* 的。要判断 =this= 的绑定对象，首先找到这个函数的直接调用位置，然后应用下面四条规则来判断：

1. （new 绑定）由 =new= 调用？绑定到新创建的对象。
2. （强制绑定）由 =call= 或者 =apply= （或者 =bind= ）调用？绑定到指定的对象。
3. （隐式绑定）由上下文对象调用？绑定到那个上下文对象。
4. （默认绑定）在严格模式下绑定到 =undefined= ，否则绑定到全局对象。

例外，ES6 中的箭头函数会继承外层函数调用的 =this= 绑定。（和 ES6 之前代码中的 ~self = this~ 机制一样）

*** 默认绑定
#+BEGIN_SRC javascript
function foo() {
	console.log( this.a );
}

var a = 2;

foo(); // 输出 2
// 绑定到全局对象 a， 如果是严格模式，绑定到 undefined
#+END_SRC

*** 隐式绑定
#+BEGIN_SRC javascript
function foo() {
	console.log( this.a );
}

var obj = {
	a: 2,
	foo: foo
};

obj.foo(); // 输出 2
// 由对象 obj 调用，绑定到 obj
#+END_SRC

*** 注意：隐式绑定的丢失问题
#+BEGIN_SRC js
function foo() {
	console.log( this.a );
}

var obj = {
	a: 2,
	foo: foo
};

var bar = obj.foo; // 注意这个引用！

var a = "oops, global"; // 全局对象 a

bar(); // 输出： "oops, global" 绑定丢失！

setTimeout( obj.foo, 100 ); // 输出： "oops, global" 绑定丢失！
#+END_SRC

*** 强制绑定： apply, call, bind
#+BEGIN_SRC js
function foo() {
	console.log( this.a );
}

var obj = {
	a: 2
};

var bar = function() {
	foo.call( obj ); // 将 foo 的 this 强制绑定到对象 obj
};

bar(); // 输出：2
setTimeout( bar, 100 ); // 输出： 2

// 强制绑定的对象无法被覆盖
bar.call( window ); // 2
#+END_SRC

*** new 绑定
#+BEGIN_SRC js
function foo(a) {
	this.a = a;
}

var bar = new foo( 2 ); // 使用 new 绑定到对象 bar
console.log( bar.a ); // 输出 2
#+END_SRC


** DONE 维特根斯坦的《战时笔记》           :@阅读:note:维特根斯坦:哲学:思考:
   CLOSED: [2018-02-09 Fri 21:53]
   :PROPERTIES:
   :EXPORT_FILE_NAME: wartime-notes
   :END:
这本书是维特根斯坦在 1914年 至 1917年 一战期间当兵时所写的笔记。这份笔记包含两部分，一部分是私人日记，一部分是哲学笔记。他出身富贵人家，又有很高的学识，完全可以不去服兵役，但他还是去了，这是为什么？那年他 25 岁，与我的年龄相仿，我很好奇他的所思所想，并且窥探一个「天才」的私人日记会是一件很有趣的事儿。
   
<!--more-->

*** 又过得非常感性了，几乎每天都手淫
他在私人日记中经常提到的两件事，手淫和工作。今天又感性了，或者，直接点就是今天又手淫了，或者今天工作了多久。工作，指的是对逻辑问题的思考。他即便身在战场，每天听着炮火声，也在不断的思考学问。

也许是因为精神上的压力？而手淫则是放松的方式？不管怎么说，拥有高智商，也不一定就能够完全的自控。

他在部队里是孤独的，被排斥的。他在日记中不断提到，周围都是些愚蠢的野蛮人。在那样的环境下，他只能够给曾经的朋友写信交流思想。把托尔斯泰的一句话，」一个人从肉体上来说是软弱无力的，但是经由精神他成为自由的人「，当作内在的精神支柱。

*** 关于记录与思考
这三年间，他不断的在思考逻辑哲学的问题，并且做了大量的记录和笔记，这也成就了他之后创作出《逻辑哲学论》这本书。长时间保持热情、深入钻研，还有一点，大量的记录，没有一个天才是平白无故就能创作出杰作的，必定是投入了常人所不能投入的努力。如果非要说是天才的话，那我以为，就是他找到了他一生所要去追随的事业。

- 你有热衷的事业吗？
- 你有每天都为它思考、并且努力工作吗？
- 即便遇到挫折，你有反省吗？


** DONE 开源实践：写在 Jane 发布之后             :@杂文:Jane:Hugo:开源:练习:
   CLOSED: [2018-03-11 Sun 21:30]
   :PROPERTIES:
   :EXPORT_FILE_NAME: hugo-theme-jane-publish
   :END:

本周我发布了一个 [[https://gohugo.io/][Hugo]] 主题 [[https://github.com/xianmin/hugo-theme-jane][Jane]] ，Jane 克隆自 [[https://github.com/olOwOlo/hugo-theme-even][hugo-theme-even]] ，大体功能基本继承自 Even 。起先，我只是使用 Hugo 来发布博文，并且选择使用 Even 作为我的博客主题。后来觉得 Even 这个主题的样式我个人不是很喜欢，就自己动手改了。改动的地方多了，外观上基本上已经不是原来的 Even 了，就想着也许自己可以基于它单独创建一个主题，顺便练练手，于是就有了 Jane 这个项目。当我在四天前向 Hugo 官方提交这个主题之后，意外地获得了官方的肯定以及推荐[fn:1]。

<!--more-->

这是我第一次认真去做的开源项目。尽管说，5年多以前我就开始使用 git ，有了 github 账号，但从未提过一个 issue ，也未提交过一次 PR ，就像是一个在论坛长期潜水的人。英文写作能力不行、对迈开第一步有些许畏惧、没找到合适的切入点等等，这些都可以当作理由，而我跨出这一步，居然用了5年的时间。毫无疑问，这得感谢 Even 的作者，感谢开源世界。

在 Jane 被官方收录到主题仓库的第二天，就得到了几个 Star，并且收到了一位使用者的反馈[fn:2]，对于我这个项目维护者而言，无疑是一种无形的鼓励。如前文所说，Jane 最初只是按我个人的需求进行的改造。所改的内容，主要是增强读者的阅读体验，然后在此基础上，增强其它的一些功能，比如说标签页中的标签云、分类页更好的展示、多国语言支持等。由于我个人水平有限，也非专业的网站设计人员，它依然有很多可以改进的地方。如果看到这篇文章的你正巧也是 Jane 的使用者，欢迎给我提出宝贵的建议，或者像我一样自己动手修改。

这次实践对于我个人是一个好的开始。我开始使用 gitflow 来规范开发流程，开始规范自己的 commit 内容，开始认真对待文档，开始认真做一个项目。磨了几年的刀，终于开始砍柴了。


[fn:1] [[https://github.com/gohugoio/hugoThemes/issues/340][New Theme: Jane · Issue #340 · gohugoio/hugoThemes]]

[fn:2] [[https://github.com/xianmin/hugo-theme-jane/issues/1][Issue #1 · xianmin/hugo-theme-jane]]


** DONE 笔记：有关开源项目                                :@计算机:开源:笔记:
   CLOSED: [2018-03-27 Tue 15:47]
   :PROPERTIES:
   :EXPORT_FILE_NAME: note-opensource-project
   :END:

 以下内容是关于怎样参与到开源项目中的一些笔记，基本上摘自网络。


*** 参考链接
  - [[https://www.phodal.com/blog/how-to-build-a-opensource-project/][开源之美：开源软件开发流程 - Phodal | Phodal - A Growth Engineer]]
  - [[https://juejin.im/post/59f98a196fb9a045132a03ed][零起点的开源社区贡献指南 - 掘金]]
  - [[http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html][Commit message 和 Change log 编写指南 - 阮一峰的网络日志]]
  - [[https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow][git-flow 的工作流程]]
 
 <!--more-->

*** 加入开源项目可以做的事儿
 - 入门：翻译文档、报告 BUG
 - 提 Issue
   - 报告 Bug 与提问
   - 提出并讨论新特性
   - 设定 Todo 目标
 - 提 Pull Request
   - 修复 bug
   - 实现新特性
   - 优化性能
   - 例行更新（如文档、依赖版本等）

*** 常用英文表达方式

 *吐槽代码：*
 - 表达 API 笨重不好用，可以说 =heavy to work with=
 - 表达模块结构不好，可以说 =not intuitive=
 - 表达处理方式太粗暴，可以说 =overkill=
 - 表达逻辑可能有漏洞，可以说 =leaky=
 - 表达要引入的东西太多，可以说 =aggressive=

 *表达观点：*
 - =I think= 有点儿武断
 - 可以用 =In my (humble) opinion=
 - 补充一个 =Not sure, maybe missing something=
 - 用 =To my knowledge= 或者 =For me=

*** commit 格式规范
 #+BEGIN_SRC 
 <type>(<scope>): <subject>
 // 空一行
 <body>
 // 空一行
 <footer>
 #+END_SRC

 *第一部分为 HEADER ：*

 - =<type>= 说明 commit 的类别：
   - feat：新功能（feature）
   - fix：修补bug
   - docs：文档（documentation）
   - style： 格式（不影响代码运行的变动）
   - refactor：重构（即不是新增功能，也不是修改bug的代码变动）
   - test：增加测试
   - chore：构建过程或辅助工具的变动
 - =<scope>= 说明 commit 影响的范围
 - =<subject>= 是 commit 目的的简短描述，可加入 Issue 的编号如 =#11=

 *第二部分为 Body ：*
 Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。

 *最后部分为 Footer：*
 1. 不兼容变动。以 =BREAKING CHANGE= 开头，后面是对变动的描述、以及变动理由和迁移方法。
 2. 关闭 Issue。如， =Closes #123, #245, #992= ，一次性关闭多个 issue。

 *特殊情况 Revert ：*

 如果当前 commit 用于撤销以前的 commit，则必须以 =revert:= 开头，后面跟着被撤销 Commit 的 Header。

*** 生成 CHANGE LOG
 [[https://github.com/conventional-changelog/conventional-changelog][conventional-changelog/conventional-changelog: Generate a changelog from git metadata.]]

 按照规范编写 commit 最大的好处就是自动化生成 Change Log 。


*** git-flow 工作流程
 [[https://github.com/petervanderdoes/gitflow-avh][petervanderdoes/gitflow-avh: AVH Edition of the git extensions to provide high-level repository operations for Vincent Driessen's branching model]]



** DONE 糟糕的项目管理新手                                           :@随笔:git:
   CLOSED: [2018-04-03 Tue 15:40]
   :PROPERTIES:
   :EXPORT_FILE_NAME: I-am-a-bad-project-manager
   :END:

最近， =hugo-theme-jane= 收到了几位朋友的 PR ，我作为这个项目的管理者，在处理 PR 上遇到了问题：有个别 PR 比较简单，我就直接在 github 后台操作合并，然后 =git pull= 到本地。我想的是本地 master 直接从远程仓库抓取到最新版，但奇怪的是居然有一个合并请求，并且多了一个合并的 commit 。

<!--more-->

如图：

[[~/Dropbox/Write/blog/static/image/other/bad-project-manager-00.png]]

[[~/Dropbox/Write/blog/static/image/other/bad-project-manager-01.png]]

本地的 master 和远程的 master 不一样了，当时也不知道为什么会这样，我只是想把两个仓库进行同步啊。算了，先更新再说吧，于是就把（没搞清楚为什么）多了一次合并 commit 的本地 master 提交到了 origin/master 。尽管说最终的代码没什么问题，但这个 commit 历史总觉得有些别扭，完全不是自己预想的那样。

直到看到了这篇文章： [[https://longair.net/blog/2009/04/16/git-fetch-and-merge/][git: fetch and merge, don’t pull | Mark's Blog]] 。我才意识到自己犯的错误在哪里……我对 git 的分支、以及合并的概念只是理解了一些皮毛，要好好补课了。

** DONE 恢复锻炼，站桩日志                                 :@随笔:锻炼:站桩:
   CLOSED: [2018-04-07 Sat 15:35]
   :PROPERTIES:
   :EXPORT_FILE_NAME: exercise01
   :END:

每次都是这样，身体觉得不太舒服了，才想到要锻炼。最近一个多月每天差不多有十几个小时坐在电脑前，导致这些天腰部又感到酸痛了。有几个月都没锻炼了吧？上一次站桩还是在 1月22日。从今天开始恢复站桩，制定一个连续 100 天的站桩计划。

<!--more-->

上周就在想着要恢复锻炼，但始终没下定决心。今天下午坐在电脑前没多久，腰部又开始酸痛，照这样下去身体肯定会出问题的，于是直接铁了心去站桩，站了半个小时。这半个小时总体不算难熬，只是呼吸数到 155 次左右的时候中断了，等反应过来已经忘了数到哪儿了。臂膀依然坚持不住，呼吸大概数到 122 次的时候放了下来。站完后，膝盖似乎比此前任何一次站完桩的感觉更疼，毕竟这么久都没有锻炼了，而且这一个多月一直都在电脑前坐着，连走动都很少。

身体是革命的本钱，不要觉得现在还年轻，身体没什么大的状况，据说，很多人 30 岁之后身体渐渐都开始出现问题。如果这个时候不多加注意，再过几年想要恢复更好的身体，也许就要付出更大的代价了。

道理是简单易懂的，关键在于实践与坚持。从今天开始，恢复锻炼，连续 100 天站桩。

** DONE 浅谈「用 git submodule 还是 git subtree」？            :@计算机:git:
   CLOSED: [2018-04-16 Mon 23:14]
   :PROPERTIES:
   :EXPORT_FILE_NAME: git-submodule
   :END:

因为有用 =git= 管理 *子项目* 的需要，我在网上找到了 =submodule= 和 =subtree= 这两种方法。奇怪的是，有好几篇文章提到用 =subtree= 替代 =submodule= 。

比如这两篇： 

- [[https://tech.youzan.com/git-subtree/][用 Git Subtree 在多个 Git 项目间双向同步子项目，附简明使用手册 - Delai - 有赞技术团队]] 
- [[https://www.atlassian.com/blog/git/alternatives-to-git-submodule-git-subtree][Git subtree: the alternative to Git submodule]]

这两个链接分别都出现在 Google 搜索中文和搜索英文时的首页上。因此，我最开始使用的是 subtree，以为 subtree 就是目前的主流方案，并且是 submodule 的替代方案。直到前些日子我改用了 submodule 才发现，submodule 才是真正我想用的。

<!--more-->

这两者都可以解决类似的管理子项目的问题，但两者的管理方式有比较大的区别，并且两者都各自有各自的优缺点。比如说，这篇文章 [[https://blog.devtang.com/2013/05/08/git-submodule-issues/][Git submodule的坑 | 唐巧的博客]] 谈到了 submodule 遇到的坑，而这篇文章 [[http://efe.baidu.com/blog/git-submodule-vs-git-subtree/][git submoudle vs git subtree | EFE Tech]] 则谈到了使用 subtree 的过程中遇到的坑。因此个人觉得很难讲谁替代谁、谁比谁更好。

有人对 submodule 和 subtree 的区别做的一个总结还是挺形象的： *submodule is link; subtree is copy* 。

当然了，由于我个人的经验有限，我说的也许都是错的，但是别人说的也不一定都是对的啊。工具嘛，适合自己，又能方便的解决问题，就可以了。


** DONE 从丽江到重庆                                       :@随笔:丽江:重庆:
   CLOSED: [2018-04-22 Sun 21:11]
   :PROPERTIES:
   :EXPORT_FILE_NAME: from-lijing-to-chongqing
   :END:
[[~/Dropbox/Write/blog/static/image/other/chongqing.jpg]]

这两年最常去的一个城市——重庆，因为她在那儿。上周又去了一趟重庆，她腹痛，在医院检查出畸胎瘤[fn:1] ，需要做手术切除，我到医院陪她。我抵达医院是手术完成后的第二天，她在病床上躺着，身上插着监护仪还有导尿管，很虚弱，什么也不能吃。手术完成的很顺利，对卵巢的伤害不是很严重。在手术前，她的父亲和医院签了协议，这个手术如果进展的不顺利，有可能需要切除卵巢，算是比较幸运，这并没有发生。她当天去的医院，当天检查出畸胎瘤，当天就做了手术，一切都发生的太突然。很遗憾，我没能第一时间陪伴在她的身边。两个人身处异地，相隔 1000 公里，距离并不可怕，可怕的是当她需要我的时候，我不能及时的出现。我还记得那晚等待她父亲回复消息——关于她手术完成的情况——那4个小时的煎熬，比预计手术时间晚了2个小时，我只能茫然的盯着手机屏幕。晚上失眠，凌晨三点多醒来，一早前往机场，飞去重庆，这一次是到医院陪她。

<!--more-->

[fn:1] [[https://zh.wikipedia.org/zh-hans/%E7%95%B8%E8%83%8E%E7%98%A4][畸胎瘤 - 维基百科，自由的百科全书]]


她腹痛的症状去年就发生过一次，那次是在丽江的医院就诊，我们当时以为是阑尾炎，结果医生也误诊成了阑尾炎，也许是因为当时我们挂的是急诊，急诊的病人较多，医生检查的不够仔细；也可能是因为我们跟医生说「她好像得了阑尾炎」误导了医生，那个疼痛的位置太接近阑尾了。不管怎样，就是误诊了。当时她只是挂了吊瓶，也还好只是挂吊瓶，她的阑尾一点问题也没有。这次复发，在重庆的医院就诊，医生让去做彩超，这才发现了问题所在。

她术后恢复的很好，第三天可以喝点粥，第四天可以吃些鱼汤之类的食物，第六天就出院了。这些天我都陪伴在她的身边，看着她的身体一天天的好转，从需要我搀扶着起身，到自己能够独立下床。她出院后，我继续陪伴了三天，然后返回丽江。



** DONE 正念日                                             :@随笔:正念:修行:
   CLOSED: [2018-05-20 Sun 20:31]
   :PROPERTIES:
   :EXPORT_FILE_NAME: Days-of-Mindfulness
   :END:

今天是正念日。早上7点的闹钟响起，起床，洗漱，煮上一锅粥，站桩半个小时，吃早饭。吃完早饭，开始收拾房间。随意乱放的衣物整理到衣柜，把脏了的衣物洗净晾晒。没用的纸盒垃圾一并丢弃。最后，用抹布把整个房间擦一遍。有的时候状态不佳、杂念丛生，打扫的过程中会感有些许烦躁，但完成整个过程，看到自己收拾整齐的房间，至少会有小小的成就感。这是我个人的修行。

<!--more-->

每周的周日是我的正念日。这是从《正念的奇迹》中得到的启发[fn:1]，每个星期选择一天用来修习正念。在这一天，我除了提醒自己要保持正念，还会刻意做一些平时不得不做，却又「不想做的、没意思的事儿」，比如，收拾房间、打扫卫生、洗衣服、给植物浇水等等。如果不刻意去做，也许我会一直拖着，拖很久，直到自己都忍受不了了，才会想到收拾，而这个拖延的过程实在让我感到焦虑。

这是一个不错的修行方式，同时也是很好的休息方式。不必着急，按照自己的节奏，把事情一样样处理好。尽管说，做事的方式理应如此，奈何每个人各有各的差异，天资秉性不同，有的人从小就培养了好习惯，直接可以进行下一步的修行。而像我这样从小就有不良习惯的，只能慢慢的刻意去改变。这又不仅仅只是习惯的问题，好的习惯只是修行的方法、工具，所追求的是要时刻保持正念。

前几天看到一篇报道[fn:2]，「冥想是否真的有作用？」（冥想与正念，尽管是两个不同的词，在我看来，所要达到的其中一个目的是相类似的，都是要个体专注于此时此刻）。尽管科学研究上没有明确的结论，表明它的作用，但它确实是个「好东西」。你只有自己试了才知道，并且尝试的方法非常简单。从我个人的经验而言，类似的修行方式，的确缓解了我的焦虑症、抑郁症。

[fn:1] [[https://book.douban.com/subject/4726852/][正念的奇迹 (豆瓣)]]
[fn:2] [[https://www.solidot.org/story?sid=56538][Solidot | 冥想是否真的有作用]]
** DONE linux 的文件管理器、命令行下，用 emacs 快速打开文件的方法 :@计算机:emacs:linux:tip:
   CLOSED: [2018-05-22 Tue 21:28]
   :PROPERTIES:
   :EXPORT_FILE_NAME: linux-emacs-quick-open-file
   :END:

首先要确认 emacs 已经启动，并且开启了 server [fn:1] 。如果使用 spacemacs ，server 默认是开启的。这样就可以使用 =emacsclient= 命令快速打开文件了。

<!--more-->

[fn:1] [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html][Emacs Server - GNU Emacs Manual]]

*** 命令行下使用 emacsclient
直接添加一条 alias ：

#+BEGIN_SRC bash
alias ec="emacsclient -nq"
#+END_SRC

参数 =nq= 的含义是：

#+BEGIN_SRC code
-n, --no-wait		Don't wait for the server to return
-q, --quiet		Don't display messages on success
#+END_SRC

以后在命令行中用 emacs 打开文件，只需要敲击 =ec 文件名= 即可。

*** 在文件管理器下，右键菜单打开文件
我的方法是：

在 =~/.local/share/applications/= 目录下，添加一个 =emacs.desktop= 文件。编辑这个 =desktop= 文件：

#+BEGIN_SRC code
[Desktop Entry]
Version=1.0
Name=Edit with Emacs
GenericName=Text Editor
MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
Exec=/usr/bin/emacsclient -nq %F
Icon=emacs25
Type=Application
Terminal=false
Categories=Utility;Development;TextEditor;
Keywords=Text;Editor;
#+END_SRC

这样我们就添加了一个名为 =Edit with Emacs= 的程序，同时在文件管理器中，就可以用这个程序打开文件了。并且可以为特定的后缀，比如 =.org= 文件，设置 *默认打开程序* 为 =Edit with Emacs= 。

[[~/Dropbox/Write/blog/static/image/other/gif/linux-emacsclient-quick-open-file.gif]]



** DONE 为 hugo 站点插入豆瓣条目的 shortcode                             :@计算机:hugo:豆瓣:
   CLOSED: [2018-05-25 Fri 15:20]
   :PROPERTIES:
   :EXPORT_FILE_NAME: hugo-shortcode-douban-item
   :END:

*最终效果：*
{{< douban 9787532132263 >}}

{{< douban 1307690 >}}


代码来源： [[https://immmmm.com/bitcron-show-douban-item][Bitcron 文章内插入豆瓣条目 - 林小沐]]
<!--more-->

*** 添加 douban shortcode
创建文件 =/layouts/shortcodes/douban.html= ，代码如下：

#+BEGIN_SRC html
<div class="douban_show">
  <div id="db{{ .Get 0 }}" date-dbid="{{ .Get 0 }}" class="douban_item post-preview"></div>
</div>
#+END_SRC

*** 添加 js

#+BEGIN_SRC js
$(document).ready(function () {
    $('.douban_item').each(function () {
        var id = $(this).attr('date-dbid').toString();
        if (id.length < 9) {
            var url = "https://api.douban.com/v2/movie/subject/" + id + "?apikey=0dad551ec0f84ed02907ff5c42e8ec70";
            $.ajax({
                url: url,
                type: 'GET',
                dataType: "jsonp",
                success: function (data) {
                    var db_casts = "",
                        db_genres = "";
                    for (var i in data.casts) {
                        db_casts += data.casts[i].name + " ";
                    }
                    for (var i in data.genres) {
                        db_genres += data.genres[i] + " ";
                    }
                    var db_star = Math.ceil(data.rating.average)
                    $('#db' + id).html(
                        "<div class='post-preview--meta'><div class='post-preview--middle'><h4 class='post-preview--title'><a target='_blank' href='" +
                        data.alt + "'>《" + data.title + "》</a></h4><div class='rating'><div class='rating-star allstar" +
                        db_star + "'></div><div class='rating-average'>" + data.rating.average +
                        "</div></div><time class='post-preview--date'>导演：" + data.directors[0].name + " / 主演：" +
                        db_casts + " / 类型：" + db_genres + " / " + data.year +
                        "</time><section style='max-height:75px;overflow:hidden;' class='post-preview--excerpt'>" +
                        data.summary +
                        "</section></div></div><div class='post-preview--image' style='background-image:url(" + data.images
                        .large + ");'></div>");
                }
            });
        } else if (id.length > 9) {
            var url = "https://api.douban.com/v2/book/isbn/" + id +
                "?fields=alt,title,subtitle,rating,author,publisher,pubdate,summary,images&apikey=0dad551ec0f84ed02907ff5c42e8ec70";
            $.ajax({
                url: url,
                type: 'GET',
                dataType: 'JSONP',
                success: function (data) {
                    var db_star = Math.ceil(data.rating.average)
                    $('#db' + id).html(
                        "<div class='post-preview--meta'><div class='post-preview--middle'><h4 class='post-preview--title'><a target='_blank' href='" +
                        data.alt + "'>《" + data.title + "》" + data.subtitle +
                        "</a></h4><div class='rating'><div class='rating-star allstar" + db_star +
                        "'></div><div class='rating-average'>" + data.rating.average +
                        "</div></div><time class='post-preview--date'>" + data.author[0] + " / " + data.publisher +
                        " / " + data.pubdate +
                        "</time><section style='max-height:75px;overflow:hidden;' class='post-preview--excerpt'>" +
                        data.summary +
                        "</section></div></div><div class='post-preview--image' style='background-image:url(" + data.images
                        .large + ");'></div>");
                }
            });
        } else {
            console.log("出错" + id)
        }
    });
});
#+END_SRC

*** 添加 css
#+BEGIN_SRC css
/* douban item post-preview --------*/

.post-preview {
  max-width: 780px;
  margin: 1em auto;
  position: relative;
  display: flex;
  background: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 2px rgba(0, 0, 0, .25), 0 0 1px rgba(0, 0, 0, .25);
}

.post-preview--meta {
  width: 75%;
  padding: 25px;
}

.post-preview--middle {
  line-height: 28px;
}

.post-preview--title {
  font-size: 18px;
  margin: 0;
}

.post-preview--title a {
  text-decoration: none;
}

.post-preview--date {
  font-size: 14px;
  color: #999;
}

.post-preview--excerpt {
  font-size: 14px;
  line-height: 1.825;
}

.post-preview--excerpt p {
  margin-bottom: 0;
}

.post-preview--image {
  width: 25%;
  float: right;
  background-size: cover;
  background-position: center center;
  border-top-right-radius: 2px;
  border-bottom-right-radius: 2px;
}

@media (max-width:550px) {
  .post-preview {
    width: 95%;
  }
  .post-preview--image {
    width: 40%;
  }
  .post-preview--meta {
    width: 60%;
  }
  .post-preview--excerpt {
    display: none;
  }
}

.rating {
  display: block;
  line-height: 15px;
}

.rating-star {
  display: inline-block;
  width: 75px;
  height: 15px;
  background-repeat: no-repeat;
  background-image: url(/image/douban_star.png);
  overflow: hidden;
}

.allstar10 {
  background-position: 0px 0px;
}

.allstar9 {
  background-position: 0px -15px;
}

.allstar8 {
  background-position: 0px -30px;
}

.allstar7 {
  background-position: 0px -45px;
}

.allstar6 {
  background-position: 0px -60px;
}

.allstar5 {
  background-position: 0px -75px;
}

.allstar4 {
  background-position: 0px -90px;
}

.allstar3 {
  background-position: 0px -105px;
}

.allstar2 {
  background-position: 0px -120px;
}

.allstar1 {
  background-position: 0px -135px;
}

.allstar0 {
  background-position: 0px -150px;
}

.rating-average {
  color: #777;
  display: inline-block;
  font-size: 13px;
  margin-left: 10px;
}
#+END_SRC

*注意：*  豆瓣评分五角星图片需要另外载入。

保存图片为 =/static/image/douban_star.png=

[[~/Dropbox/Write/blog/static/image/douban_star.png]]


*** 使用方法

#+BEGIN_SRC code
{{</* douban id */>}}
#+END_SRC

- 电影条目如 https://movie.douban.com/subject/26862829/ 取后面 26862829 为 id。
- 图书条目，取它的 ISBN 为 id。

*** 补充说明
关于添加 js, css 代码，一般 hugo 主题都有 =customJS= 或 =customCSS= 选项（比如我的主题），我们可以添加到其中。

我不确定有几个人需要这个 =douban shortcode= ，因此，暂时没有整合到 =hugo-theme-jane= 中，如果有人需要，欢迎在此文章下留言。

最后，感谢原创作者林小沐！

** DONE 因为贫穷的缘故                                          :@随笔:反省:
   CLOSED: [2018-07-06 Sat 21:36]
   :PROPERTIES:
   :EXPORT_FILE_NAME: because-of-poverty
   :END:

最近一个多月比较忙。店里的事情，接待客人，接待朋友，接待团队，还有办理证件。另外，和一个朋友合作，做几个微信公众号的项目，也算是开了些眼界。这种忙碌，如果换在大城市，估计算不了什么。只是过惯了在乡下自由散漫的日子，还是会觉得，哎呀，有点儿忙啊。因为贫穷的缘故吧，想着多做点事儿，能多挣些钱，钱也没挣多少，反倒更焦虑了。

<!--more-->

这一个月，基本没锻炼，没看书。有一点空闲时间，就只想和朋友喝几杯。稍不留神，又喝高了。对于我这样的穷人而言，把酒言欢，算是最大的享受了。锻炼？算了吧。看书？没那功夫。写字？心烦意乱。有时候我会去想，像斯宾诺莎那样，以「磨镜片」为生，过着清贫的生活。事实上，在这乡下地方，也算是过着清贫的生活了。奈何有太多的俗世的烦恼无法割舍，心有不甘啊，不甘于贫穷。

可是挣钱这种事，有时候也不知道是否是命运安排。在青旅见多了形形色色的人，人生的大起大落，似乎也司空见惯了。最无可奈何的是，钱没挣着，身体先垮了。这是命吗？还是自己能掌控的呢？我不知道。我相信自强不息，可似乎有些事情冥冥之中又自有天意。做好自己能掌控的事儿，比如分内的工作、学习知识、锻炼身体。其余的还是听天由命吧！


** DONE 更好的基于 github issues 的评论系统——utterances :@计算机:github:tip:blog:Hugo:
   CLOSED: [2018-07-10 Tue 14:34]
   :PROPERTIES:
   :EXPORT_FILE_NAME: utterances-comment-system
:END:

*** 背景介绍
 基于 *github issues* 的评论系统，比较流行的有 [[https://github.com/imsun/gitment][gitment]] 和 [[https://github.com/gitalk/gitalk][gitalk]] 。这两个项目我很早就注意到了，它们明显的缺陷是，当用户如果尝试登录评论，所要求的权限是很多的，因此我也一直有所顾忌，不愿授权。不授权就无法评论了吗？还真不是。我在网上搜到了这篇文章——[[https://blog.wolfogre.com/posts/security-problem-of-gitment/][Gitment 的安全性争议 | 狼煞博客]]，文中提到：

 #+BEGIN_QUOTE
 无论是在本博客还是在别的网站，如果评论系统用的是 Gitment，只要你不是百分百信任网站所有者，就尽量不要登录再留言。
 #+END_QUOTE

 这个建议很好理解，稍微有点网络安全知识的人，通常都不会轻易把自己账户的各种操作权限交给一个素不相识的人。不过，此文作者还给出了一个「不登录直接留言」的操作方法，就是直接打开 issues 页面来评论。我这么讲，对于没用过基于 *github issues* 评论系统的读者而言，估计是一头雾水，这个按上面文章的方法操作一次，你就知道是怎么一回事儿了。


*** 为什么使用 utterances ？
 以上简单讲了一下背景，下面介绍本篇文章的主角——[[https://github.com/utterance/utterances][utterances]]。

 它和 =gitment= 、 =gitalk= 有什么区别呢？

最大的区别就是 =utterances= 所需要的权限要少得多，仅限于读写特定仓库的 issues 和 comments 。至于原理，我也没有深究，有兴趣的读者可以看一看项目作者写的说明：[[https://github.com/utterance/utterances/pull/25][utterances 1.0 by jdanyow · Pull Request #25]] 。并且，仅需要给 =utterances= 授权一次，其他凡是使用 =utterances= 的站点都不必再 *额外授权* ，直接就可以评论。

 第二个区别，部署更简单。按照文档的步骤： 

1. 新建一个用于存放评论的仓库；
2. 给这个仓库部署 =utterances= 应用；
3. 将一段 *script* 代码放入你的博客。这样就可以了。


 第三个区别， =utterances= 有一个「机器人」可以自动初始化博文的 issues 评论。而 =gitment= 需要使用脚本，或者需要手动点击初始化按钮。（这个问题我是通过他人的文章了解到的，自己并没有测试考证。）

 综上， =utterances= 是一个相对而言 *更便捷* 的基于 *github issues* 的评论系统。

想试用的朋友不妨在底部评论一下吧！ :-)

另外，我已将 =utterances= 并入到博客主题 [[https://github.com/xianmin/hugo-theme-jane][hugo-theme-jane]] 中了。

** TODO 一位哥伦比亚作家在中国                                           :@随笔:
   :PROPERTIES:
   :EXPORT_FILE_NAME:jjj
:END:

John 是哥伦比亚人，上个月住进了我们旅舍，明天他就要搬走了。他长期带着一个宽边帽子，六十多岁，也许是保持健身的缘故，身材很壮实，精神状态很好，在中国生活了二十几年。

他是一位作家，有一天我俩在院子里相遇，随意聊了几句，他告诉我的。我在这个旅舍接待来来往往的游客，大部分时候无意去询问客人的个人信息。比如，你做什么工作？为什么到这儿来？等等之类的。我不是警察，没这方面兴趣。但是 John 这个人让我有些好奇，他每天深居简出，你在院子里可以看到，他大部分时间都坐在窗台边的电脑桌前工作，生活极有规律。他在写作，也许以此为生。他说写的是科学相关的内容，具体写些什么，我没有继续追问。有一天出于好奇，在网上搜了他的名字，的确有这么一位作家，并且出版过一本关于尼泊尔的书，除此之外就没有更多关于他的信息了。

今天是2018年8月4日，这天晚上，他过来跟我打招呼，他说，「Hi，Michel，我明天要走了，搬到另外一个院子。」我有点儿惊讶，然后才意识到他已经住了一个月，今晚是最后一晚，他将要搬到他的朋友那儿去 。我邀请他到大厅小酌一杯，他欣然接收了。这是我俩第一次一起喝酒，算是相互道个别吧。他住在我们旅舍的这一个月，我也曾多次邀请过他，和我们旅舍的另外几个朋友一起小酌几杯，有过两次吧，他也坐下同我们聊天，喝点白开水，但拒绝喝酒，他说他还要工作。我劝道，喝酒会带来灵感。他坚持不喝酒。今天晚上，他没有拒绝，不过坚持只喝一杯，他说他还要工作。

我俩从什么话题开始聊的？我记不太清了。我记得我问了一句，你为什么一直呆在中国？他说，中国很好，是他停留过的国家中最好的国家。于是就有了我俩接下来的聊天。

我：真的吗？为什么你会觉得中国好呢？

他：我在很多国家生活过，美国，欧洲，然后到了亚洲，到了中国。中国政府做的非常出色，这里的人民有工作，治安也很好，中国政府是做的最好的。（我可以肯定，他用了最高级。）

我（感到非常疑惑）：我没有去过别的国家，我希望自己有一天能够到别的国家看看，欧洲，美国，包括你的国家，他们对我来说是非常陌生的。我不知道别的国家是什么样子，但我觉得，我的国家，中国，也许并没有那么好。我希望它更好。

他（知道我的疑惑，并且在中国这么长时间，肯定也和其他中国人聊过这个话题）：在美国，有上百万的流浪汉，他们一无所有，无家可归，是的，无家可归。不仅仅只是黑人，包括白人。但是美国政府没做任何事情，没做任何事情。的确，如果你有钱，你可以过得很不错。但是如果你没有钱（一副厌恶的表情，后面的话他没说）。在印度，印度和中国很像，一样有很大的面积，一样有很多的人口，但是在印度由于……

我：等级。

他：是的，等级。印度很富有，不过贫富差距非常非常的大。有很多人一无所有，受人歧视，但是他们的政府，没做任何事情。在中国不一样，中国人更平等，中国政府做了很多事情，是的，中国政府是最出色的。

我：会不会因为你是外国人，所以你觉得在中国挺好。

他：不。在别的国家我也是外国人。我所说的是我看到的。

我：我的英语不太好。一般日常交流没有问题，但是如果想要谈的更深入的话，有很大困难。

他：你的英语挺好的，只是你不常说。

我：我对很多问题感到困惑。在我们国家有很多人批评政府，包括一些共产党员，也对自己的政府不满。与你说的恐怕相反。

他：我知道，我知道。我有很多中国朋友，他们总是说，美国，美国，美国巴拉巴拉，但是他们从来都没有去过美国。我在美国生活过，我知道那儿是什么样。还有一些欧洲的小国家，他们的政府治理的很好，但他们只有几百万人口。

我：相当于中国一个城市的人口。

他：所以他们政府的工作相对要轻松的多。

我：你是诚实的吗？（我想说的是，你说的是实话吗？）

他（笑了笑）：我说的是实话。我第一次来中国是在三十几年前，之后来来去去好几次，在中国过的很舒服，就是因为中国好，所以我才一直过来，然后长期生活在中国。有些国家，短期过去旅行还不错，要是在那生活，我不喜欢。我过去在贵州遵义做老师，做了很多年。那儿的茅台很好喝，就是有些烈。这个酒不错（举起他的杯子），干杯。

我（举起我的杯子）：干杯。过去中国共产党人长征的时候路过遵义，喝了那的酒，觉得特别好喝。后来他们建立了这个国家……

他：他们想念那儿的酒。

我：是的。然后，茅台就出名了。

咱俩开怀一笑。我给他添酒。他拒绝了。

他：我在遵义做了几年的老师，后来有段时间这个城市越来越大，人越来越多了。你知道，人多了就嘈杂，然后我就来到了云南。贵州的朋友一直希望我回去，我不回去，我不喜欢大城市。尽管说大城市生活很便利。

我：哈哈，我也不喜欢大城市，所以我来到了这儿。

他：这儿非常好，我非常喜欢你的旅舍，而且这儿的人都很不错。你找对了地方。前几年我在大理，现在大理也变得嘈杂了。我需要在安静的地方工作。（他看了看他的空杯子，笑了笑）也许我该上去工作了。

我：好的。明天你就要走了，如果有时间，欢迎经常过来坐坐。

他：谢谢你的酒，谢谢这里的一切。我会过来的。

我：祝你工作顺利！


后记：这是我跟 John 第一次单独交流，以上内容是我第二天凭记忆记录下来的，肯定有疏漏和不太准确的地方。我在旅舍接触过不少来自不同国家的外国人，一起聊过政治，谈过对中国的看法，他是我第一次接触到的如此盛赞中国政府的外国人。鉴于我英文水平有限，沟通上始终存在障碍，所谈论的话题无法深入，仅限于闲聊。

** DONE linux 下，fcitx 输入法的直角引号设置    :@计算机:linux:fcitx:输入法:
   CLOSED: [2018-08-07 Tue 23:04]
   :PROPERTIES:
   :EXPORT_FILE_NAME: linux-fcitx-punc
:END:

我不确定你有没有遇到过这样的问题，输入一个双引号，它是 *前引号* 呢，还是 *后引号* 。也许是字体的缘故，我总得瞪大了眼睛才能分辨的清楚。出于好奇，我上网搜了下，还真有解决办法。最简单的办法就是使用港台的标准，使用直角引号。请看图片：

[[~/Dropbox/Write/blog/static/image/other/fcitx-punc-01.png]]

<!--more-->


*** 为什么使用直角引号
关于这个问题，知乎上有讨论，[[https://sspai.com/post/45516][这篇文章]] [fn:1] 做了总结：

[fn:1] 这是一篇不错的中文标点符号的知识普及。


#+BEGIN_QUOTE
直角引号的提倡者主要有如下理由：

其一，与冒号、分号等标点都有用于东亚文字的全角版本不同，弯引号缺少一个中文专用的版本。无论中文西文，弯引号都是同样码位上的同一对字符，其外形完全取决于字体。在中西文混排的场合，弯引号常常因为套用西文字体而显示为半角宽度，与汉字和其他中文标点差异很大，从而对排版效果产生不利影响。

其二，提倡者认为直角引号的形态与方块字更加契合。

其三，直角引号在香港、台湾和日本都是官方规范，这也为将其「进口」到简体中文世界提供了依据。
#+END_QUOTE

我个人也觉得，直角引号更容易分辨，也更美观。比如在我的浏览器下的显示如图：

{{< figure src="/image/other/fcitx-punc-02.png" title="以上是双引号" >}}

{{< figure src="/image/other/fcitx-punc-03.png" title="以上是直角引号" >}}

*** linux 下怎样输入直角引号？
如果你用的是 fcitx 输入法框架，输入直角引号的问题很容易就能解决。 [fn:2]

[fn:2] [[https://fcitx-im.org/wiki/Punctuation][Punctuation - Fcitx]]


1. 查看 =/usr/share/fcitx/data/= 文件夹下， =punc-ng.mb-zh_CN= 这个文件的内容。这是一个全局配置文件。

2. 将这个「配置文件」复制到用户目录，即 =~/.config/fcitx/data/= 目录下，进行修改：

#+BEGIN_SRC code
" 「 」
' 『 』
#+END_SRC

这样，当我们使用中文输入法时，输出的引号就是直角引号了。

由此得到的启发，我们同时还能将任意字符进行修改，比如说：中文输入法下，输入 =*= 时，得到的是 =×= 这个字符。对我个人而言， =×= 这个符号我基本上很少使用，而在使用 「markdonw」 或者 「orgmode」 标记语言时， =*= 号却是经常使用的。那么，直接在「配置文件」中，将 =* ×= 这一行删除就可以了。

题外话，为什么不直接修改 =/usr/share/fcitx/data/= 目录下的全局文件，而要放到用户目录下？这是为了更好的管理个人的 *dotfiles* ，不妨参考我的另一篇文章：[[http://www.xianmin.org/post/02-manage-dotfiles/][Linux 下，使用 Git 管理 dotfiles（配置文件）]] 。

*** 替换所有旧文章中的引号

使用 sed 命令：

#+BEGIN_SRC bash
sed -i s/“/「/g `grep -rl “ *`    # 替换前引号
sed -i s/”/」/g `grep -rl ” *`    # 替换后引号
#+END_SRC

