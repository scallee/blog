#+HUGO_BASE_DIR: ../
#+SEQ_TODO: TODO DRAFT DONE
#+PROPERTY: header-args :eval no

* INBOX

** DONE JavaScript —— this 绑定                           :JavaScript:@计算机:
   CLOSED: [2017-11-14 Tue 14:39]
   :PROPERTIES:
   :EXPORT_FILE_NAME: javascript-this
   :END:

Google 搜索出来的两个不错的链接：

- [[https://jeffjade.com/2015/08/03/2015-08-03-javascript-this/][JavaScript 之 this 详解 | 晚晴幽草轩]]
- [[https://segmentfault.com/a/1190000003046071][JS 中 this 关键字详解 - JSer - SegmentFault]]


我是先阅读的 [[https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes][You-Dont-Know-JS: this & Object Prototypes]] 。再回过头看上面的那两篇文章，我觉得他们讲解的太复杂了，而 《You-Dont-Know-JS》 就归纳的非常好。

<!--more-->

以下是总结笔记：

JS 中的 =this= 总是指向一个对象 (Object)，这个对象是基于函数运行时 *动态绑定* 的。要判断 =this= 的绑定对象，首先找到这个函数的直接调用位置，然后应用下面四条规则来判断：

1. （new 绑定）由 =new= 调用？绑定到新创建的对象。
2. （强制绑定）由 =call= 或者 =apply= （或者 =bind= ）调用？绑定到指定的对象。
3. （隐式绑定）由上下文对象调用？绑定到那个上下文对象。
4. （默认绑定）在严格模式下绑定到 =undefined= ，否则绑定到全局对象。

例外，ES6 中的箭头函数会继承外层函数调用的 =this= 绑定。（和 ES6 之前代码中的 ~self = this~ 机制一样）

*** 默认绑定
#+BEGIN_SRC javascript
function foo() {
	console.log( this.a );
}

var a = 2;

foo(); // 输出 2
// 绑定到全局对象 a， 如果是严格模式，绑定到 undefined
#+END_SRC

*** 隐式绑定
#+BEGIN_SRC javascript
function foo() {
	console.log( this.a );
}

var obj = {
	a: 2,
	foo: foo
};

obj.foo(); // 输出 2
// 由对象 obj 调用，绑定到 obj
#+END_SRC

*** 注意：隐式绑定的丢失问题
#+BEGIN_SRC js
function foo() {
	console.log( this.a );
}

var obj = {
	a: 2,
	foo: foo
};

var bar = obj.foo; // 注意这个引用！

var a = "oops, global"; // 全局对象 a

bar(); // 输出： "oops, global" 绑定丢失！

setTimeout( obj.foo, 100 ); // 输出： "oops, global" 绑定丢失！
#+END_SRC

*** 强制绑定： apply, call, bind
#+BEGIN_SRC js
function foo() {
	console.log( this.a );
}

var obj = {
	a: 2
};

var bar = function() {
	foo.call( obj ); // 将 foo 的 this 强制绑定到对象 obj
};

bar(); // 输出：2
setTimeout( bar, 100 ); // 输出： 2

// 强制绑定的对象无法被覆盖
bar.call( window ); // 2
#+END_SRC

*** new 绑定
#+BEGIN_SRC js
function foo(a) {
	this.a = a;
}

var bar = new foo( 2 ); // 使用 new 绑定到对象 bar
console.log( bar.a ); // 输出 2
#+END_SRC


** DONE 维特根斯坦的《战时笔记》           :@阅读:note:维特根斯坦:哲学:思考:
   CLOSED: [2018-02-09 Fri 21:53]
   :PROPERTIES:
   :EXPORT_FILE_NAME: wartime-notes
   :END:
这本书是维特根斯坦在 1914年 至 1917年 一战期间当兵时所写的笔记。这份笔记包含两部分，一部分是私人日记，一部分是哲学笔记。他出身富贵人家，又有很高的学识，完全可以不去服兵役，但他还是去了，这是为什么？那年他 25 岁，与我的年龄相仿，我很好奇他的所思所想，并且窥探一个“天才”的私人日记会是一件很有趣的事儿。
   
<!--more-->

*** 又过得非常感性了，几乎每天都手淫
他在私人日记中经常提到的两件事，手淫和工作。今天又感性了，或者，直接点就是今天又手淫了，或者今天工作了多久。工作，指的是对逻辑问题的思考。他即便身在战场，每天听着炮火声，也在不断的思考学问。

也许是因为精神上的压力？而手淫则是放松的方式？不管怎么说，拥有高智商，也不一定就能够完全的自控。

他在部队里是孤独的，被排斥的。他在日记中不断提到，周围都是些愚蠢的野蛮人。在那样的环境下，他只能够给曾经的朋友写信交流思想。把托尔斯泰的一句话，”一个人从肉体上来说是软弱无力的，但是经由精神他成为自由的人“，当作内在的精神支柱。

*** 关于记录与思考
这三年间，他不断的在思考逻辑哲学的问题，并且做了大量的记录和笔记，这也成就了他之后创作出《逻辑哲学论》这本书。长时间保持热情、深入钻研，还有一点，大量的记录，没有一个天才是平白无故就能创作出杰作的，必定是投入了常人所不能投入的努力。如果非要说是天才的话，那我以为，就是他找到了他一生所要去追随的事业。

- 你有热衷的事业吗？
- 你有每天都为它思考、并且努力工作吗？
- 即便遇到挫折，你有反省吗？


** DONE 开源实践：写在 Jane 发布之后             :@杂文:Jane:Hugo:开源:练习:
   CLOSED: [2018-03-11 Sun 21:30]
   :PROPERTIES:
   :EXPORT_FILE_NAME: hugo-theme-jane-publish
   :END:

本周我发布了一个 [[https://gohugo.io/][Hugo]] 主题 [[https://github.com/xianmin/hugo-theme-jane][Jane]] ，Jane 克隆自 [[https://github.com/olOwOlo/hugo-theme-even][hugo-theme-even]] ，大体功能基本继承自 Even 。起先，我只是使用 Hugo 来发布博文，并且选择使用 Even 作为我的博客主题。后来觉得 Even 这个主题的样式我个人不是很喜欢，就自己动手改了。改动的地方多了，外观上基本上已经不是原来的 Even 了，就想着也许自己可以基于它单独创建一个主题，顺便练练手，于是就有了 Jane 这个项目。当我在四天前向 Hugo 官方提交这个主题之后，意外地获得了官方的肯定以及推荐[fn:1]。

<!--more-->

这是我第一次认真去做的开源项目。尽管说，5年多以前我就开始使用 git ，有了 github 账号，但从未提过一个 issue ，也未提交过一次 PR ，就像是一个在论坛长期潜水的人。英文写作能力不行、对迈开第一步有些许畏惧、没找到合适的切入点等等，这些都可以当作理由，而我跨出这一步，居然用了5年的时间。毫无疑问，这得感谢 Even 的作者，感谢开源世界。

在 Jane 被官方收录到主题仓库的第二天，就得到了几个 Star，并且收到了一位使用者的反馈[fn:2]，对于我这个项目维护者而言，无疑是一种无形的鼓励。如前文所说，Jane 最初只是按我个人的需求进行的改造。所改的内容，主要是增强读者的阅读体验，然后在此基础上，增强其它的一些功能，比如说标签页中的标签云、分类页更好的展示、多国语言支持等。由于我个人水平有限，也非专业的网站设计人员，它依然有很多可以改进的地方。如果看到这篇文章的你正巧也是 Jane 的使用者，欢迎给我提出宝贵的建议，或者像我一样自己动手修改。

这次实践对于我个人是一个好的开始。我开始使用 gitflow 来规范开发流程，开始规范自己的 commit 内容，开始认真对待文档，开始认真做一个项目。磨了几年的刀，终于开始砍柴了。


[fn:1] [[https://github.com/gohugoio/hugoThemes/issues/340][New Theme: Jane · Issue #340 · gohugoio/hugoThemes]]

[fn:2] [[https://github.com/xianmin/hugo-theme-jane/issues/1][Issue #1 · xianmin/hugo-theme-jane]]


** DONE 笔记：有关开源项目                                :@计算机:开源:笔记:
   CLOSED: [2018-03-27 Tue 15:47]
   :PROPERTIES:
   :EXPORT_FILE_NAME: note-opensource-project
   :END:

 以下内容是关于怎样参与到开源项目中的一些笔记，基本上摘自网络。


*** 参考链接
  - [[https://www.phodal.com/blog/how-to-build-a-opensource-project/][开源之美：开源软件开发流程 - Phodal | Phodal - A Growth Engineer]]
  - [[https://juejin.im/post/59f98a196fb9a045132a03ed][零起点的开源社区贡献指南 - 掘金]]
  - [[http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html][Commit message 和 Change log 编写指南 - 阮一峰的网络日志]]
  - [[https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow][git-flow 的工作流程]]
 
 <!--more-->

*** 加入开源项目可以做的事儿
 - 入门：翻译文档、报告 BUG
 - 提 Issue
   - 报告 Bug 与提问
   - 提出并讨论新特性
   - 设定 Todo 目标
 - 提 Pull Request
   - 修复 bug
   - 实现新特性
   - 优化性能
   - 例行更新（如文档、依赖版本等）

*** 常用英文表达方式

 *吐槽代码：*
 - 表达 API 笨重不好用，可以说 =heavy to work with=
 - 表达模块结构不好，可以说 =not intuitive=
 - 表达处理方式太粗暴，可以说 =overkill=
 - 表达逻辑可能有漏洞，可以说 =leaky=
 - 表达要引入的东西太多，可以说 =aggressive=

 *表达观点：*
 - =I think= 有点儿武断
 - 可以用 =In my (humble) opinion=
 - 补充一个 =Not sure, maybe missing something=
 - 用 =To my knowledge= 或者 =For me=

*** commit 格式规范
 #+BEGIN_SRC 
 <type>(<scope>): <subject>
 // 空一行
 <body>
 // 空一行
 <footer>
 #+END_SRC

 *第一部分为 HEADER ：*

 - =<type>= 说明 commit 的类别：
   - feat：新功能（feature）
   - fix：修补bug
   - docs：文档（documentation）
   - style： 格式（不影响代码运行的变动）
   - refactor：重构（即不是新增功能，也不是修改bug的代码变动）
   - test：增加测试
   - chore：构建过程或辅助工具的变动
 - =<scope>= 说明 commit 影响的范围
 - =<subject>= 是 commit 目的的简短描述，可加入 Issue 的编号如 =#11=

 *第二部分为 Body ：*
 Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。

 *最后部分为 Footer：*
 1. 不兼容变动。以 =BREAKING CHANGE= 开头，后面是对变动的描述、以及变动理由和迁移方法。
 2. 关闭 Issue。如， =Closes #123, #245, #992= ，一次性关闭多个 issue。

 *特殊情况 Revert ：*

 如果当前 commit 用于撤销以前的 commit，则必须以 =revert:= 开头，后面跟着被撤销 Commit 的 Header。

*** 生成 CHANGE LOG
 [[https://github.com/conventional-changelog/conventional-changelog][conventional-changelog/conventional-changelog: Generate a changelog from git metadata.]]

 按照规范编写 commit 最大的好处就是自动化生成 Change Log 。


*** git-flow 工作流程
 [[https://github.com/petervanderdoes/gitflow-avh][petervanderdoes/gitflow-avh: AVH Edition of the git extensions to provide high-level repository operations for Vincent Driessen's branching model]]


** TODO 现代 JavaScript 开发流程简介



** DONE 糟糕的项目管理新手                                           :@随笔:git:
   CLOSED: [2018-04-03 Tue 15:40]
   :PROPERTIES:
   :EXPORT_FILE_NAME: I-am-a-bad-project-manager
   :END:

最近， =hugo-theme-jane= 收到了几位朋友的 PR ，我作为这个项目的管理者，在处理 PR 上遇到了问题：有个别 PR 比较简单，我就直接在 github 后台操作合并，然后 =git pull= 到本地。我想的是本地 master 直接从远程仓库抓取到最新版，但奇怪的是居然有一个合并请求，并且多了一个合并的 commit 。

<!--more-->

如图：

[[~/Dropbox/Write/blog/static/image/other/bad-project-manager-00.png]]

[[~/Dropbox/Write/blog/static/image/other/bad-project-manager-01.png]]

本地的 master 和远程的 master 不一样了，当时也不知道为什么会这样，我只是想把两个仓库进行同步啊。算了，先更新再说吧，于是就把（没搞清楚为什么）多了一次合并 commit 的本地 master 提交到了 origin/master 。尽管说最终的代码没什么问题，但这个 commit 历史总觉得有些别扭，完全不是自己预想的那样。

直到看到了这篇文章： [[https://longair.net/blog/2009/04/16/git-fetch-and-merge/][git: fetch and merge, don’t pull | Mark's Blog]] 。我才意识到自己犯的错误在哪里……我对 git 的分支、以及合并的概念只是理解了一些皮毛，要好好补课了。
