#+HUGO_BASE_DIR: ../
#+SEQ_TODO: TODO DRAFT DONE
#+PROPERTY: header-args :eval no

* INBOX

** DONE JavaScript —— this 绑定                           :JavaScript:@tech:
   CLOSED: [2017-11-14 Tue 14:39]
   :PROPERTIES:
   :EXPORT_FILE_NAME: javascript-this
   :END:

Google 搜索出来的两个不错的链接：

- [[https://jeffjade.com/2015/08/03/2015-08-03-javascript-this/][JavaScript 之 this 详解 | 晚晴幽草轩]]
- [[https://segmentfault.com/a/1190000003046071][JS 中 this 关键字详解 - JSer - SegmentFault]]


我是先阅读的 [[https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes][You-Dont-Know-JS: this & Object Prototypes]] 。再回过头看上面的那两篇文章，我觉得他们讲解的太复杂了，而 《You-Dont-Know-JS》 就归纳的非常好。

<!--more-->

以下是总结笔记：

JS 中的 =this= 总是指向一个对象 (Object)，这个对象是基于函数运行时 *动态绑定* 的。要判断 =this= 的绑定对象，首先找到这个函数的直接调用位置，然后应用下面四条规则来判断：

1. （new 绑定）由 =new= 调用？绑定到新创建的对象。
2. （强制绑定）由 =call= 或者 =apply= （或者 =bind= ）调用？绑定到指定的对象。
3. （隐式绑定）由上下文对象调用？绑定到那个上下文对象。
4. （默认绑定）在严格模式下绑定到 =undefined= ，否则绑定到全局对象。

例外，ES6 中的箭头函数会继承外层函数调用的 =this= 绑定。（和 ES6 之前代码中的 ~self = this~ 机制一样）

*** 默认绑定
#+BEGIN_SRC javascript
function foo() {
	console.log( this.a );
}

var a = 2;

foo(); // 输出 2
// 绑定到全局对象 a， 如果是严格模式，绑定到 undefined
#+END_SRC

*** 隐式绑定
#+BEGIN_SRC javascript
function foo() {
	console.log( this.a );
}

var obj = {
	a: 2,
	foo: foo
};

obj.foo(); // 输出 2
// 由对象 obj 调用，绑定到 obj
#+END_SRC

*** 注意：隐式绑定的丢失问题
#+BEGIN_SRC js
function foo() {
	console.log( this.a );
}

var obj = {
	a: 2,
	foo: foo
};

var bar = obj.foo; // 注意这个引用！

var a = "oops, global"; // 全局对象 a

bar(); // 输出： "oops, global" 绑定丢失！

setTimeout( obj.foo, 100 ); // 输出： "oops, global" 绑定丢失！
#+END_SRC

*** 强制绑定： apply, call, bind
#+BEGIN_SRC js
function foo() {
	console.log( this.a );
}

var obj = {
	a: 2
};

var bar = function() {
	foo.call( obj ); // 将 foo 的 this 强制绑定到对象 obj
};

bar(); // 输出：2
setTimeout( bar, 100 ); // 输出： 2

// 强制绑定的对象无法被覆盖
bar.call( window ); // 2
#+END_SRC

*** new 绑定
#+BEGIN_SRC js
function foo(a) {
	this.a = a;
}

var bar = new foo( 2 ); // 使用 new 绑定到对象 bar
console.log( bar.a ); // 输出 2
#+END_SRC

** DONE 什么都略懂一点却一样也不精通                                :@essay:
   CLOSED: [2017-12-06 Wed 20:59]
   :PROPERTIES:
   :EXPORT_FILE_NAME: 07-2017
   :END:


翻阅这一年写的日记，“2017年6月26日：我是一个无知、无明、无趣的年轻人，对烟酒没有控制，自制力差，拖延症严重，喜欢胡思乱想，空想而缺乏行动，空有抱负却一事无成，喜好很多但一无所长。也许再过几年，我就是一个无知、无明、无趣的中年人了。”

回想起这几年，似乎每年总有那么几天，感到焦虑，厌恶自己。因为对生活充满困惑，我翻看佛经还有哲学，希望从中能够得到答案，但这个世界的复杂程度远非短时间的阅读就解释的了。疲惫了，学习乐器，学会用箫吹几首简单的曲子，学会用吉他弹几首简单的民谣，仅此而已，更多的时候是玩几局游戏。每当想到现在以及未来存在的经济压力问题，学习英语，学习计算机，然而路还很长，实际能力始终达不到期望。目前我管理的这家青年旅舍，只能说勉强维持运转，经营、管理、推广、人际交往，这些都是问题，困扰着我。什么都略懂一点却一样也不精通，这就是自己当下的状态吧。

不知不觉就到了12月，这一年又快要结束了。似乎还是老样子，没什么说得出口的，即便是小小的成就。除了店里的营业额比去年略高了些，仅仅只是略高而已。也许是输出太少了吧，学习需要记录，思想需要表达，我应该多做一些输出的事情。搭建这个博客写文章的目的之一，就是输出内容。

今年印象较深的几个收获：

1. 开始学习 JS
2. 《刻意练习》、《正念的奇迹》
3. 和女友吵了几次架

关于 JS 的学习

1. 《JavaScript 权威指南》了解基本语法
2. 从 CodeWars 的练习中强化了自己的基本功
3. 《你不知道的 JS》进阶学习 JS 中的难点
4. 了解了 npm、gulp 等现代 JS 构建工具
5. electron 的学习

简单的对本年度作个小结，很多事都不大记得了。



** TODO emacs, orgmode & hugo 写作流程     :@essay:
:PROPERTIES:
:EXPORT_FILE_NAME: 00-emacs-orgmode-and-hugo-write-flow
:END:

