#+HUGO_BASE_DIR: ../
#+SEQ_TODO: TODO DONE
#+PROPERTY: header-args :eval no
#+OPTIONS: author:nil

* INBOX
** DONE JavaScript —— this 绑定                           :JavaScript:@计算机:
   CLOSED: [2017-11-14 Tue 14:39]
   :PROPERTIES:
   :EXPORT_FILE_NAME: javascript-this
   :END:

Google 搜索出来的两个不错的链接：

- [[https://jeffjade.com/2015/08/03/2015-08-03-javascript-this/][JavaScript 之 this 详解 | 晚晴幽草轩]]
- [[https://segmentfault.com/a/1190000003046071][JS 中 this 关键字详解 - JSer - SegmentFault]]


我是先阅读的 [[https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes][You-Dont-Know-JS: this & Object Prototypes]] 。再回过头看上面的那两篇文章，我觉得他们讲解的太复杂了，而 《You-Dont-Know-JS》 就归纳的非常好。

<!--more-->

以下是总结笔记：

JS 中的 =this= 总是指向一个对象 (Object)，这个对象是基于函数运行时 *动态绑定* 的。要判断 =this= 的绑定对象，首先找到这个函数的直接调用位置，然后应用下面四条规则来判断：

1. （new 绑定）由 =new= 调用？绑定到新创建的对象。
2. （强制绑定）由 =call= 或者 =apply= （或者 =bind= ）调用？绑定到指定的对象。
3. （隐式绑定）由上下文对象调用？绑定到那个上下文对象。
4. （默认绑定）在严格模式下绑定到 =undefined= ，否则绑定到全局对象。

例外，ES6 中的箭头函数会继承外层函数调用的 =this= 绑定。（和 ES6 之前代码中的 ~self = this~ 机制一样）

*** 默认绑定
#+BEGIN_SRC javascript
function foo() {
	console.log( this.a );
}

var a = 2;

foo(); // 输出 2
// 绑定到全局对象 a， 如果是严格模式，绑定到 undefined
#+END_SRC

*** 隐式绑定
#+BEGIN_SRC javascript
function foo() {
	console.log( this.a );
}

var obj = {
	a: 2,
	foo: foo
};

obj.foo(); // 输出 2
// 由对象 obj 调用，绑定到 obj
#+END_SRC

*** 注意：隐式绑定的丢失问题
#+BEGIN_SRC js
function foo() {
	console.log( this.a );
}

var obj = {
	a: 2,
	foo: foo
};

var bar = obj.foo; // 注意这个引用！

var a = "oops, global"; // 全局对象 a

bar(); // 输出： "oops, global" 绑定丢失！

setTimeout( obj.foo, 100 ); // 输出： "oops, global" 绑定丢失！
#+END_SRC

*** 强制绑定： apply, call, bind
#+BEGIN_SRC js
function foo() {
	console.log( this.a );
}

var obj = {
	a: 2
};

var bar = function() {
	foo.call( obj ); // 将 foo 的 this 强制绑定到对象 obj
};

bar(); // 输出：2
setTimeout( bar, 100 ); // 输出： 2

// 强制绑定的对象无法被覆盖
bar.call( window ); // 2
#+END_SRC

*** new 绑定
#+BEGIN_SRC js
function foo(a) {
	this.a = a;
}

var bar = new foo( 2 ); // 使用 new 绑定到对象 bar
console.log( bar.a ); // 输出 2
#+END_SRC




** DONE 笔记：有关开源项目                                :@计算机:开源:笔记:
   CLOSED: [2018-03-27 Tue 15:47]
   :PROPERTIES:
   :EXPORT_FILE_NAME: note-opensource-project
   :END:

 以下内容是关于怎样参与到开源项目中的一些笔记，基本上摘自网络。


*** 参考链接
  - [[https://www.phodal.com/blog/how-to-build-a-opensource-project/][开源之美：开源软件开发流程 - Phodal | Phodal - A Growth Engineer]]
  - [[https://juejin.im/post/59f98a196fb9a045132a03ed][零起点的开源社区贡献指南 - 掘金]]
  - [[http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html][Commit message 和 Change log 编写指南 - 阮一峰的网络日志]]
  - [[https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow][git-flow 的工作流程]]
 
 <!--more-->

*** 加入开源项目可以做的事儿
 - 入门：翻译文档、报告 BUG
 - 提 Issue
   - 报告 Bug 与提问
   - 提出并讨论新特性
   - 设定 Todo 目标
 - 提 Pull Request
   - 修复 bug
   - 实现新特性
   - 优化性能
   - 例行更新（如文档、依赖版本等）

*** 常用英文表达方式

 *吐槽代码：*
 - 表达 API 笨重不好用，可以说 =heavy to work with=
 - 表达模块结构不好，可以说 =not intuitive=
 - 表达处理方式太粗暴，可以说 =overkill=
 - 表达逻辑可能有漏洞，可以说 =leaky=
 - 表达要引入的东西太多，可以说 =aggressive=

 *表达观点：*
 - =I think= 有点儿武断
 - 可以用 =In my (humble) opinion=
 - 补充一个 =Not sure, maybe missing something=
 - 用 =To my knowledge= 或者 =For me=

*** commit 格式规范
 #+BEGIN_SRC 
 <type>(<scope>): <subject>
 // 空一行
 <body>
 // 空一行
 <footer>
 #+END_SRC

 *第一部分为 HEADER ：*

 - =<type>= 说明 commit 的类别：
   - feat：新功能（feature）
   - fix：修补bug
   - docs：文档（documentation）
   - style： 格式（不影响代码运行的变动）
   - refactor：重构（即不是新增功能，也不是修改bug的代码变动）
   - test：增加测试
   - chore：构建过程或辅助工具的变动
 - =<scope>= 说明 commit 影响的范围
 - =<subject>= 是 commit 目的的简短描述，可加入 Issue 的编号如 =#11=

 *第二部分为 Body ：*
 Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。

 *最后部分为 Footer：*
 1. 不兼容变动。以 =BREAKING CHANGE= 开头，后面是对变动的描述、以及变动理由和迁移方法。
 2. 关闭 Issue。如， =Closes #123, #245, #992= ，一次性关闭多个 issue。

 *特殊情况 Revert ：*

 如果当前 commit 用于撤销以前的 commit，则必须以 =revert:= 开头，后面跟着被撤销 Commit 的 Header。

*** 生成 CHANGE LOG
 [[https://github.com/conventional-changelog/conventional-changelog][conventional-changelog/conventional-changelog: Generate a changelog from git metadata.]]

 按照规范编写 commit 最大的好处就是自动化生成 Change Log 。


*** git-flow 工作流程
 [[https://github.com/petervanderdoes/gitflow-avh][petervanderdoes/gitflow-avh: AVH Edition of the git extensions to provide high-level repository operations for Vincent Driessen's branching model]]


** DONE 浅谈「用 git submodule 还是 git subtree」？            :@计算机:git:
   CLOSED: [2018-04-16 Mon 23:14]
   :PROPERTIES:
   :EXPORT_FILE_NAME: git-submodule
   :END:

因为有用 =git= 管理 *子项目* 的需要，我在网上找到了 =submodule= 和 =subtree= 这两种方法。奇怪的是，有好几篇文章提到用 =subtree= 替代 =submodule= 。

比如这两篇： 

- [[https://tech.youzan.com/git-subtree/][用 Git Subtree 在多个 Git 项目间双向同步子项目，附简明使用手册 - Delai - 有赞技术团队]] 
- [[https://www.atlassian.com/blog/git/alternatives-to-git-submodule-git-subtree][Git subtree: the alternative to Git submodule]]

这两个链接分别都出现在 Google 搜索中文和搜索英文时的首页上。因此，我最开始使用的是 subtree，以为 subtree 就是目前的主流方案，并且是 submodule 的替代方案。直到前些日子我改用了 submodule 才发现，submodule 才是真正我想用的。

<!--more-->

这两者都可以解决类似的管理子项目的问题，但两者的管理方式有比较大的区别，并且两者都各自有各自的优缺点。比如说，这篇文章 [[https://blog.devtang.com/2013/05/08/git-submodule-issues/][Git submodule的坑 | 唐巧的博客]] 谈到了 submodule 遇到的坑，而这篇文章 [[http://efe.baidu.com/blog/git-submodule-vs-git-subtree/][git submoudle vs git subtree | EFE Tech]] 则谈到了使用 subtree 的过程中遇到的坑。因此个人觉得很难讲谁替代谁、谁比谁更好。

有人对 submodule 和 subtree 的区别做的一个总结还是挺形象的： *submodule is link; subtree is copy* 。

当然了，由于我个人的经验有限，我说的也许都是错的，但是别人说的也不一定都是对的啊。工具嘛，适合自己，又能方便的解决问题，就可以了。


** DONE linux 的文件管理器、命令行下，用 emacs 快速打开文件的方法 :@计算机:emacs:linux:tip:
   CLOSED: [2018-05-22 Tue 21:28]
   :PROPERTIES:
   :EXPORT_FILE_NAME: linux-emacs-quick-open-file
   :END:

首先要确认 emacs 已经启动，并且开启了 server [fn:1] 。如果使用 spacemacs ，server 默认是开启的。这样就可以使用 =emacsclient= 命令快速打开文件了。

<!--more-->

[fn:1] [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html][Emacs Server - GNU Emacs Manual]]

*** 命令行下使用 emacsclient
直接添加一条 alias ：

#+BEGIN_SRC bash
alias ec="emacsclient -nq"
#+END_SRC

参数 =nq= 的含义是：

#+BEGIN_SRC code
-n, --no-wait		Don't wait for the server to return
-q, --quiet		Don't display messages on success
#+END_SRC

以后在命令行中用 emacs 打开文件，只需要敲击 =ec 文件名= 即可。

*** 在文件管理器下，右键菜单打开文件
我的方法是：

在 =~/.local/share/applications/= 目录下，添加一个 =emacs.desktop= 文件。编辑这个 =desktop= 文件：

#+BEGIN_SRC code
[Desktop Entry]
Version=1.0
Name=Edit with Emacs
GenericName=Text Editor
MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
Exec=/usr/bin/emacsclient -nq %F
Icon=emacs25
Type=Application
Terminal=false
Categories=Utility;Development;TextEditor;
Keywords=Text;Editor;
#+END_SRC

这样我们就添加了一个名为 =Edit with Emacs= 的程序，同时在文件管理器中，就可以用这个程序打开文件了。并且可以为特定的后缀，比如 =.org= 文件，设置 *默认打开程序* 为 =Edit with Emacs= 。

[[~/Dropbox/Write/blog/static/image/other/gif/linux-emacsclient-quick-open-file.gif]]


** DONE 为 hugo 站点插入豆瓣条目的 shortcode                             :@计算机:hugo:豆瓣:
   CLOSED: [2018-05-25 Fri 15:20]
   :PROPERTIES:
   :EXPORT_FILE_NAME: hugo-shortcode-douban-item
   :END:

*最终效果：*
{{< douban 9787532132263 >}}

{{< douban 1307690 >}}


代码来源： [[https://immmmm.com/bitcron-show-douban-item][Bitcron 文章内插入豆瓣条目 - 林小沐]]
<!--more-->

*** 添加 douban shortcode
创建文件 =/layouts/shortcodes/douban.html= ，代码如下：

#+BEGIN_SRC html
<div class="douban_show">
  <div id="db{{ .Get 0 }}" date-dbid="{{ .Get 0 }}" class="douban_item post-preview"></div>
</div>
#+END_SRC

*** 添加 js

#+BEGIN_SRC js
$(document).ready(function () {
    $('.douban_item').each(function () {
        var id = $(this).attr('date-dbid').toString();
        if (id.length < 9) {
            var url = "https://api.douban.com/v2/movie/subject/" + id + "?apikey=0dad551ec0f84ed02907ff5c42e8ec70";
            $.ajax({
                url: url,
                type: 'GET',
                dataType: "jsonp",
                success: function (data) {
                    var db_casts = "",
                        db_genres = "";
                    for (var i in data.casts) {
                        db_casts += data.casts[i].name + " ";
                    }
                    for (var i in data.genres) {
                        db_genres += data.genres[i] + " ";
                    }
                    var db_star = Math.ceil(data.rating.average)
                    $('#db' + id).html(
                        "<div class='post-preview--meta'><div class='post-preview--middle'><h4 class='post-preview--title'><a target='_blank' href='" +
                        data.alt + "'>《" + data.title + "》</a></h4><div class='rating'><div class='rating-star allstar" +
                        db_star + "'></div><div class='rating-average'>" + data.rating.average +
                        "</div></div><time class='post-preview--date'>导演：" + data.directors[0].name + " / 主演：" +
                        db_casts + " / 类型：" + db_genres + " / " + data.year +
                        "</time><section style='max-height:75px;overflow:hidden;' class='post-preview--excerpt'>" +
                        data.summary +
                        "</section></div></div><div class='post-preview--image' style='background-image:url(" + data.images
                        .large + ");'></div>");
                }
            });
        } else if (id.length > 9) {
            var url = "https://api.douban.com/v2/book/isbn/" + id +
                "?fields=alt,title,subtitle,rating,author,publisher,pubdate,summary,images&apikey=0dad551ec0f84ed02907ff5c42e8ec70";
            $.ajax({
                url: url,
                type: 'GET',
                dataType: 'JSONP',
                success: function (data) {
                    var db_star = Math.ceil(data.rating.average)
                    $('#db' + id).html(
                        "<div class='post-preview--meta'><div class='post-preview--middle'><h4 class='post-preview--title'><a target='_blank' href='" +
                        data.alt + "'>《" + data.title + "》" + data.subtitle +
                        "</a></h4><div class='rating'><div class='rating-star allstar" + db_star +
                        "'></div><div class='rating-average'>" + data.rating.average +
                        "</div></div><time class='post-preview--date'>" + data.author[0] + " / " + data.publisher +
                        " / " + data.pubdate +
                        "</time><section style='max-height:75px;overflow:hidden;' class='post-preview--excerpt'>" +
                        data.summary +
                        "</section></div></div><div class='post-preview--image' style='background-image:url(" + data.images
                        .large + ");'></div>");
                }
            });
        } else {
            console.log("出错" + id)
        }
    });
});
#+END_SRC

*** 添加 css
#+BEGIN_SRC css
/* douban item post-preview --------*/

.post-preview {
  max-width: 780px;
  margin: 1em auto;
  position: relative;
  display: flex;
  background: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 2px rgba(0, 0, 0, .25), 0 0 1px rgba(0, 0, 0, .25);
}

.post-preview--meta {
  width: 75%;
  padding: 25px;
}

.post-preview--middle {
  line-height: 28px;
}

.post-preview--title {
  font-size: 18px;
  margin: 0;
}

.post-preview--title a {
  text-decoration: none;
}

.post-preview--date {
  font-size: 14px;
  color: #999;
}

.post-preview--excerpt {
  font-size: 14px;
  line-height: 1.825;
}

.post-preview--excerpt p {
  margin-bottom: 0;
}

.post-preview--image {
  width: 25%;
  float: right;
  background-size: cover;
  background-position: center center;
  border-top-right-radius: 2px;
  border-bottom-right-radius: 2px;
}

@media (max-width:550px) {
  .post-preview {
    width: 95%;
  }
  .post-preview--image {
    width: 40%;
  }
  .post-preview--meta {
    width: 60%;
  }
  .post-preview--excerpt {
    display: none;
  }
}

.rating {
  display: block;
  line-height: 15px;
}

.rating-star {
  display: inline-block;
  width: 75px;
  height: 15px;
  background-repeat: no-repeat;
  background-image: url(/image/douban_star.png);
  overflow: hidden;
}

.allstar10 {
  background-position: 0px 0px;
}

.allstar9 {
  background-position: 0px -15px;
}

.allstar8 {
  background-position: 0px -30px;
}

.allstar7 {
  background-position: 0px -45px;
}

.allstar6 {
  background-position: 0px -60px;
}

.allstar5 {
  background-position: 0px -75px;
}

.allstar4 {
  background-position: 0px -90px;
}

.allstar3 {
  background-position: 0px -105px;
}

.allstar2 {
  background-position: 0px -120px;
}

.allstar1 {
  background-position: 0px -135px;
}

.allstar0 {
  background-position: 0px -150px;
}

.rating-average {
  color: #777;
  display: inline-block;
  font-size: 13px;
  margin-left: 10px;
}
#+END_SRC

*注意：*  豆瓣评分五角星图片需要另外载入。

保存图片为 =/static/image/douban_star.png=

[[~/Dropbox/Write/blog/static/image/douban_star.png]]


*** 使用方法

#+BEGIN_SRC code
{{</* douban id */>}}
#+END_SRC

- 电影条目如 https://movie.douban.com/subject/26862829/ 取后面 26862829 为 id。
- 图书条目，取它的 ISBN 为 id。

*** 补充说明
关于添加 js, css 代码，一般 hugo 主题都有 =customJS= 或 =customCSS= 选项（比如我的主题），我们可以添加到其中。

我不确定有几个人需要这个 =douban shortcode= ，因此，暂时没有整合到 =hugo-theme-jane= 中，如果有人需要，欢迎在此文章下留言。

最后，感谢原创作者林小沐！



** DONE 更好的基于 github issues 的评论系统——utterances :@计算机:github:tip:blog:Hugo:
   CLOSED: [2018-07-10 Tue 14:34]
   :PROPERTIES:
   :EXPORT_FILE_NAME: utterances-comment-system
:END:

*** 背景介绍
 基于 *github issues* 的评论系统，比较流行的有 [[https://github.com/imsun/gitment][gitment]] 和 [[https://github.com/gitalk/gitalk][gitalk]] 。这两个项目我很早就注意到了，它们明显的缺陷是，当用户如果尝试登录评论，所要求的权限是很多的，因此我也一直有所顾忌，不愿授权。不授权就无法评论了吗？还真不是。我在网上搜到了这篇文章——[[https://blog.wolfogre.com/posts/security-problem-of-gitment/][Gitment 的安全性争议 | 狼煞博客]]，文中提到：

 #+BEGIN_QUOTE
 无论是在本博客还是在别的网站，如果评论系统用的是 Gitment，只要你不是百分百信任网站所有者，就尽量不要登录再留言。
 #+END_QUOTE

 这个建议很好理解，稍微有点网络安全知识的人，通常都不会轻易把自己账户的各种操作权限交给一个素不相识的人。不过，此文作者还给出了一个「不登录直接留言」的操作方法，就是直接打开 issues 页面来评论。我这么讲，对于没用过基于 *github issues* 评论系统的读者而言，估计是一头雾水，这个按上面文章的方法操作一次，你就知道是怎么一回事儿了。


*** 为什么使用 utterances ？
 以上简单讲了一下背景，下面介绍本篇文章的主角——[[https://github.com/utterance/utterances][utterances]]。

 它和 =gitment= 、 =gitalk= 有什么区别呢？

最大的区别就是 =utterances= 所需要的权限要少得多，仅限于读写特定仓库的 issues 和 comments 。至于原理，我也没有深究，有兴趣的读者可以看一看项目作者写的说明：[[https://github.com/utterance/utterances/pull/25][utterances 1.0 by jdanyow · Pull Request #25]] 。并且，仅需要给 =utterances= 授权一次，其他凡是使用 =utterances= 的站点都不必再 *额外授权* ，直接就可以评论。

 第二个区别，部署更简单。按照文档的步骤： 

1. 新建一个用于存放评论的仓库；
2. 给这个仓库部署 =utterances= 应用；
3. 将一段 *script* 代码放入你的博客。这样就可以了。


 第三个区别， =utterances= 有一个「机器人」可以自动初始化博文的 issues 评论。而 =gitment= 需要使用脚本，或者需要手动点击初始化按钮。（这个问题我是通过他人的文章了解到的，自己并没有测试考证。）

 综上， =utterances= 是一个相对而言 *更便捷* 的基于 *github issues* 的评论系统。

想试用的朋友不妨在底部评论一下吧！ :-)

另外，我已将 =utterances= 并入到博客主题 [[https://github.com/xianmin/hugo-theme-jane][hugo-theme-jane]] 中了。



** DONE linux 下，fcitx 输入法的直角引号设置    :@计算机:linux:fcitx:输入法:
   CLOSED: [2018-08-07 Tue 23:04]
   :PROPERTIES:
   :EXPORT_FILE_NAME: linux-fcitx-punc
:END:

我不确定你有没有遇到过这样的问题，输入一个双引号，它是 *前引号* 呢，还是 *后引号* 。也许是字体的缘故，我总得瞪大了眼睛才能分辨的清楚。出于好奇，我上网搜了下，还真有解决办法。最简单的办法就是使用港台的标准，使用直角引号。请看图片：

[[~/Dropbox/Write/blog/static/image/other/fcitx-punc-01.png]]

<!--more-->


*** 为什么使用直角引号
关于这个问题，知乎上有讨论，[[https://sspai.com/post/45516][这篇文章]] [fn:1] 做了总结：

[fn:1] 这是一篇不错的中文标点符号的知识普及。


#+BEGIN_QUOTE
直角引号的提倡者主要有如下理由：

其一，与冒号、分号等标点都有用于东亚文字的全角版本不同，弯引号缺少一个中文专用的版本。无论中文西文，弯引号都是同样码位上的同一对字符，其外形完全取决于字体。在中西文混排的场合，弯引号常常因为套用西文字体而显示为半角宽度，与汉字和其他中文标点差异很大，从而对排版效果产生不利影响。

其二，提倡者认为直角引号的形态与方块字更加契合。

其三，直角引号在香港、台湾和日本都是官方规范，这也为将其「进口」到简体中文世界提供了依据。
#+END_QUOTE

我个人也觉得，直角引号更容易分辨，也更美观。比如在我的浏览器下的显示如图：

{{< figure src="/image/other/fcitx-punc-02.png" title="以上是双引号" >}}

{{< figure src="/image/other/fcitx-punc-03.png" title="以上是直角引号" >}}

*** linux 下怎样输入直角引号？
如果你用的是 fcitx 输入法框架，输入直角引号的问题很容易就能解决。 [fn:2]

[fn:2] [[https://fcitx-im.org/wiki/Punctuation][Punctuation - Fcitx]]


1. 查看 =/usr/share/fcitx/data/= 文件夹下， =punc-ng.mb-zh_CN= 这个文件的内容。这是一个全局配置文件。

2. 将这个「配置文件」复制到用户目录，即 =~/.config/fcitx/data/= 目录下，进行修改：

#+BEGIN_SRC code
" 「 」
' 『 』
#+END_SRC

这样，当我们使用中文输入法时，输出的引号就是直角引号了。

由此得到的启发，我们同时还能将任意字符进行修改，比如说：中文输入法下，输入 =*= 时，得到的是 =×= 这个字符。对我个人而言， =×= 这个符号我基本上很少使用，而在使用 「markdonw」 或者 「orgmode」 标记语言时， =*= 号却是经常使用的。那么，直接在「配置文件」中，将 =* ×= 这一行删除就可以了。

题外话，为什么不直接修改 =/usr/share/fcitx/data/= 目录下的全局文件，而要放到用户目录下？这是为了更好的管理个人的 *dotfiles* ，不妨参考我的另一篇文章：[[http://www.xianmin.org/post/02-manage-dotfiles/][Linux 下，使用 Git 管理 dotfiles（配置文件）]] 。

*** 替换所有旧文章中的引号

使用 sed 命令：

#+BEGIN_SRC bash
sed -i s/“/「/g `grep -rl “ *`    # 替换前引号
sed -i s/”/」/g `grep -rl ” *`    # 替换后引号
#+END_SRC



** DONE 我的搭档 「ThinkPad X230」                   :@计算机:ThinkPad:工具:
   CLOSED: [2018-08-11 Sat 12:14]
   :PROPERTIES:
   :EXPORT_FILE_NAME: thinkpad-x230
   :END:

{{< figure src="/image/other/thinkpad-x230.jpg" title="" width="60%" class="center" >}}


最近，我的搭档 「ThinkPad X230」 的键盘出了点问题，按键偶尔会完全失灵，小红点经常失控。当机立断，我直接在淘宝买了个新的键盘换上，感觉它又重获了新生。这是我喜欢 ThinkPad 的主要原因，它太好拆了，换个键盘只要下俩螺丝，几分钟就搞定。但凡哪个部件有任何问题，我都能轻松的更换，这让我觉得它是真正属于我的，能跟随我很久。

<!--more-->

它是一台二手的笔记本电脑，是我在两年多前在淘宝上买的，因为便宜，我没记错的话，只要 1700 多。至于它的前主人是谁，不得而知。到了我这儿，我把旧电脑的硬盘给它装上，再装上两条新的 8G 内存条，就开始替我工作了。只需要重装一下驱动，都不必折腾系统。之后慢慢熟悉了使用小红点，确实比触摸板好用太多。

如果有人问我笔记本电脑有没有推荐的？我会首先推荐 ThinkPad 。要是预算有限呢，那就买台二手的吧，反正都是会用旧的。 :-)



** TODO Linux 下，使用 Linuxbrew 安装更多的软件
[[https://brew.sh/][Homebrew]] 是 MacOS 下的一个包管理工具，大部分使用 Mac 的开发者对它应该很熟悉了。[[http://linuxbrew.sh/#features][Linuxbrew]] 是 Linux 下的 Homebrew ，使用它，就可以用 =brew install= 安装更多的软件。也许有人要问，各个 Linux 发行版都已经 *自带了「包管理工具」* ，为什么还要多此一举，用 Linuxbrew 呢？

*** 为什么用 Linuxbrew ？
1. 将软件安装在用户目录下，无需使用 sudo 。
2. 获取更多软件资源，安装最新版本的软件。
3. 保持 linux 系统环境的整洁。

*我举一个我最近使用的一个例子：*

我要安装 [[https://yarnpkg.com/zh-Hans/][Yarn]] ，系统仓库的版本太低，如果 [[https://yarnpkg.com/zh-Hans/docs/install#debian-stable][按照官网的步骤安装]] ，则太过繁琐。而使用了 Linuxbrew ，只需要一条命令 =brew install yarn= ，就安装好了。

*** Linuxbrew 的安装
参照官网。

1、 执行命令：

#+BEGIN_SRC bash 
sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
#+END_SRC

2、 添加 PATH 路径（比如我的，添加到 =.zprofile= 文件）：

#+BEGIN_SRC bash
export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"
export MANPATH="/home/linuxbrew/.linuxbrew/share/man:$MANPATH"
export INFOPATH="/home/linuxbrew/.linuxbrew/share/info:$INFOPATH"
#+END_SRC


